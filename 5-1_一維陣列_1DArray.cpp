#include<iostream>
using namespace std;

int main(){
    //一維陣列
    //語法: 資料型別 陣列名稱[陣列長度];

    //範例一(基本語法)
    int A1[2]; //創建一個陣列A1，資料型別為int，長度為2
    //因為未指定初始值，也沒有初始化陣列，因此A1內的元素值會是亂數


    //範例二(指定初始值)
    int A2[3]={10,20,30};

    //注意: 陣列的索引值(index)依序為0,1,2,3...，並非1,2,3,4...
    /*
    解析
    創建一個陣列A2，資料型別為int，長度為3，並指定其初始值為{10,20,30}，因此
    陣列A2內的第一個元素，索引值(index)=0，A[0]=10
    A2的第二個元素，index=1，A[1]=20
    A2的第三個元素，index=2，A[2]=30
    */

    //簡單來說，A2[0]表示: 在A2這個陣列中，index=0的位置(也就是第一個元素)，的元素值

    cout << A2[0] << ' ' << A2[1] << ' ' << A2[2] <<endl;
    //輸出: 10 20 30，分別對應A2[0] A2[1] A2[2]

    /*
    其他創建陣列的方法
    int Array1[]={0,1,2,3} 
    可以不給陣列長度，電腦會自動依據初始值的數量設定陣列長度
    如Array1，給定初始值0,1,2,3，共四個數，電腦自動設定陣列長度為4
    
    int Array2[4]={1,2};
    在Array2中，設定其長度為4，但僅給2個初始值，則剩下的元素會自動設為0
    Array2[0]=1, Array2[1]=2, Array2[2]=0, Array2[3]=0
    */

    cout<<"=================="<<'\n';//分隔線

    //範例三(更改元素值)
    //語法: 陣列名稱[元素所在位置的索引值] = 要賦予的值
    float A3[2]={1.414, 1.732}; //創建一個陣列A3，資料型別為float
    cout << A3[0] << ' ' << A3[1] <<endl; //輸出: 1.414 1.732
    A3[0]=3.14;
    A3[1]=114.514;
    cout << A3[0] << ' ' << A3[1] <<endl; //輸出: 3.14 114.514

    /*
    解析
    創建陣列A3，資料型別為float，初始值為{1.414, 1.732}
    故此時A3[0]的值是1.414, A3[1]的值是1.732
    接著分別更改A3[0]與A3[1]的元素值
    A3[0]=3.14 -> 還記得等於(=)的作用嗎，將等號右邊的值賦予(存入)左邊的變數位置
    因此，等號右邊的3.14會被存入到左邊的A3[0]
    程式執行後，A3[0]內的元素值會從原本的1.414變成3.14，直接用3.14覆蓋掉1.414
    A3[1]也是同理
    */
 
    cout<<"=================="<<'\n';//分隔線

    //範例四(輸入與輸出)
    int A4[3]; //建立一個陣列A4，資料型別為int，長度為3

    //現在我要輸入三個數字並分別存入A4[0],A4[1],A4[2]中，並接著輸出這三個數字
    cout << "Please input 3 numbers>> ";
    cin >> A4[0] >> A4[1] >> A4[2];
    cout << "Your first number is: " << A4[0] <<endl;
    cout << "Your second number is: " << A4[1] <<endl;
    cout << "Your third number is: " << A4[2] <<endl;
    /*
    輸入與輸出
    Please input 3 numbers>> 11 22 33
    Your first number is: 11
    Your second number is: 22
    Your third number is: 33
    */  

    /*
    解析
    int A4[3];
    我首先建立了一個陣列A4，資料型別為int，長度為3
    這裡不指定初始值，也不初始化，是因為等一下要直接把輸入(cin)的元素存入陣列中
    而陣列內原本的元素值會直接被覆蓋過去，因此不影響

    cin >> A4[0] >> A4[1] >> A4[2];
    接著使用cin將第一個元素存入A4[0]，第二個元素存入A4[1]，第三個元素存入A4[2]
    最後分別輸出A4[0], A4[1], A4[2]
    */

    cout<<"=================="<<'\n';//分隔線

    //範例五(用迴圈存取陣列)
    int A5[2]={}; //建立一個陣列A5，資料型別為int，長度為2，並初始化為0
    //關於初始化: int A5[2]={} 等同於int A5[2]={0} 也等同於int A5[2]={0,0}

    //我現在要使用for迴圈，第一次輸入兩個數字，並加進A5[0]，第二次輸入兩個數字，並加進A5[1]，最後輸出
    for (int i=0;i<2;i++){
        int Num1,Num2;
        cout << "Please input 2 numbers, I will add them together>> ";
        cin >> Num1 >> Num2;
        A5[i]=Num1+Num2;
    }
    cout <<"Output: "<< A5[0] << ' ' << A5[1]<<endl;
    /*
    輸入與輸出
    Please input 2 numbers, I will add them together>> 1 3
    Please input 2 numbers, I will add them together>> 50 100
    Output: 4 150
    */

    /*
    解析
    int A5[2]={};
    先建立一個陣列A5，資料型別為int，長度為2，並初始化為0
    進入迴圈，此時i=0
    創建兩個變數Num1與Num2，資料型別為int，用來接收輸入的數字
    接著輸入兩個數字，並分別用Num1,Num2來接收
    最後將兩數相加後存入A5的第一個位置，也就是A5[i]中(此時i=0)
    i++

    進入下一次迴圈，此時i=1
    .
    .
    最後將兩數相加後存入A5的第一個位置，也就是A5[i]中(此時i=1)

    至此，我們成功執行兩次: (輸入兩個數字，並將他們相加的結果存入陣列中)
    */
    /*
    備註: 
    i在第一次迴圈中為0，A5[i]代表的變數位置為A5[0]
    i在第一次迴圈中為1，A5[i]代表的變數位置為A5[1]
    所以我們能直接用A5[i]來將結果分別存入陣列的不同位置中
    */
}

//本篇筆記參考《徹底研究最新C++物件導向程式設計實例》 P6-1~6-6
//Created by B.J.Wang 2025/10/7